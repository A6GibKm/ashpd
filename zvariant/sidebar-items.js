initSidebarItems({"constant":[["ARRAY_SIGNATURE_CHAR","The prefix of ARRAY type signature, as a character. Provided for manual signature creation."],["ARRAY_SIGNATURE_STR","The prefix of ARRAY type signature, as a string. Provided for manual signature creation."],["DICT_ENTRY_SIG_END_CHAR","The closing character of DICT_ENTRY type signature. Provided for manual signature creation."],["DICT_ENTRY_SIG_END_STR","The closing character of DICT_ENTRY type signature, as a string. Provided for manual signature creation."],["DICT_ENTRY_SIG_START_CHAR","The opening character of DICT_ENTRY type signature. Provided for manual signature creation."],["DICT_ENTRY_SIG_START_STR","The opening character of DICT_ENTRY type signature, as a string. Provided for manual signature creation."],["STRUCT_SIG_END_CHAR","The closing character of STRUCT type signature. Provided for manual signature creation."],["STRUCT_SIG_END_STR","The closing character of STRUCT type signature, as a string. Provided for manual signature creation."],["STRUCT_SIG_START_CHAR","The opening character of STRUCT type signature. Provided for manual signature creation."],["STRUCT_SIG_START_STR","The opening character of STRUCT type signature, as a string. Provided for manual signature creation."]],"enum":[["EncodingFormat","The encoding format."],["Error","Error type used by zvariant API."],["Value","A generic container, in the form of an enum that holds exactly one value of any of the other types."]],"fn":[["from_slice","Deserialize `T` from a given slice of bytes."],["from_slice_fds","Deserialize `T` from a given slice of bytes, containing file descriptor indices."],["from_slice_fds_for_signature","Deserialize `T` from a given slice of bytes containing file descriptor indices, with the given signature."],["from_slice_for_signature","Deserialize `T` from a given slice of bytes with the given signature."],["serialized_size","Calculate the serialized size of `T`."],["serialized_size_fds","Calculate the serialized size of `T` that (potentially) contains FDs."],["to_bytes","Serialize `T` as a byte vector."],["to_bytes_fds","Serialize `T` that (potentially) contains FDs, as a byte vector."],["to_bytes_fds_for_signature","Serialize `T` that (potentially) contains FDs and has the given signature, to a new byte vector."],["to_bytes_for_signature","Serialize `T` that has the given signature, to a new byte vector."],["to_writer","Serialize `T` to the given `writer`."],["to_writer_fds","Serialize `T` that (potentially) contains FDs, to the given `writer`."],["to_writer_fds_for_signature","Serialize `T` that (potentially) contains FDs and has the given signature, to the given `writer`."],["to_writer_for_signature","Serialize `T` that has the given signature, to the given `writer`."]],"struct":[["Array","A helper type to wrap arrays in a [`Value`]."],["Deserializer","Our deserialization implementation."],["Dict","A helper type to wrap dictionaries in a [`Value`]."],["EncodingContext","The encoding context to use with the [serialization and deserialization] API."],["Fd","A `RawFd` wrapper."],["ObjectPath","String that identifies objects at a given destination on the D-Bus bus."],["OwnedValue","Owned `Value`"],["Serializer","Our serialization implementation."],["Signature","String that [identifies] the type of an encoded value."],["Str","A string wrapper."],["Structure","A helper type to wrap structs in [`Value`]."]],"trait":[["Basic","Trait for basic types."],["Type","Trait implemented by all serializable types."]],"type":[["Result","Alias for a `Result` with the error type `zvariant::Error`."]]});